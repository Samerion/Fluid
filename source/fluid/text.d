module fluid.text;

import std.math;
import std.range;
import std.traits;
import std.string;
import std.algorithm;

import fluid.node;
import fluid.style;
import fluid.utils;
import fluid.backend;
import fluid.typeface;

public import fluid.rope;


@safe:


/// Create a Text struct with given range as a text layer map.
StyledText!StyleRange mapText(StyleRange)(Node node, const char[] text, StyleRange range) {

    return typeof(return)(node, text, range);

}

alias Text = StyledText!();

/// Draws text: handles updates, formatting and styling.
struct StyledText(StyleRange = TextStyleSlice[]) {

    static assert(isForwardRange!StyleRange,
        "StyleRange must be a valid forward range of TextStyleSlices");
    static assert(is(ElementType!StyleRange : TextStyleSlice),
        "StyleRange must be a valid forward range of TextStyleSlices");

    public {

        /// Node owning this text struct.
        Node node;

        /// Texture generated by the struct.
        CompositeTexture texture;

        /// Range assigning slices of text to styles by index. A single text can have up to 256 different styles.
        ///
        /// Ranges should not overlap, and must be ordered by `start`. If a piece of text is not matched, it is assumed
        /// to belong to style 0.
        StyleRange styleMap;

        /// If true, enables optimizations for frequently edited text.
        bool hasFastEdits;

        /// Indent width, in pixels.
        float indentWidth = 32;

    }

    private {

        /// Last used DPI.
        Vector2 _dpi;

        /// Last used font size.
        float _fontSize;

        /// Cache of all measured text segments.
        TextRulerCache _cache;

        /// Underlying text.
        Rope _value;

        /// Text bounding box size, in dots.
        Vector2 _sizeDots;

        /// If true, text will be wrapped if it doesn't fit available space.
        bool _wrap;

        /// Start and end of the update range; area of the text that was updated since the last resize and has to be
        /// measured again.
        size_t _updateRangeStart, _updateRangeEnd;

    }

    alias minSize = size;
    alias value this;

    static if (is(StyleRange == TextStyleSlice[]))
    this(Node node, Rope text) {

        this.node = node;
        opAssign(text);

    }

    this(Node node, Rope text, StyleRange styleMap) {

        this.styleMap = styleMap;
        this.node = node;
        opAssign(text);

    }

    static if (is(StyleRange == TextStyleSlice[]))
    this(Node node, const(char)[] text) {

        this.node = node;
        opAssign(text);

    }

    this(Node node, const(char)[] text, StyleRange styleMap) {

        this.styleMap = styleMap;
        this.node = node;
        opAssign(text);

    }

    /// Copy the text, clear ownership and texture.
    this(StyledText text) const {

        this.node = null;
        this._value = text.value;
        this.styleMap = text.styleMap.save;

    }

    inout(FluidBackend) backend() inout {

        return node.tree.backend;

    }

    /// Get or the value rendered by this text.
    /// 
    /// If more text is rendered, partial changes should be done through `replace`.
    ///
    /// Params:
    ///     newValue = Set a new value for this text.
    /// Returns: The value.
    ref inout(Rope) value() inout {

        return _value;

    }

    /// ditto
    Rope value(Rope newValue) {

        replace(0, _value.length, newValue);
        return _value;

    }

    /// ditto
    Rope value(const char[] newValue) {

        return value(Rope(newValue));

    }

    /// Clear cache and reload all text.
    void reload() {

        reload(0, value.length);

    }

    /// Queue reloading text in range. If the range changes length, specify both oldHigh and newHigh.
    ///
    /// This does NOT perform the action immediately. It updates text intervals in the cache, and marks the 
    /// area that needs to be remeasurement. Positions will update on the next resize, which is triggered as this 
    /// function is called.
    ///
    /// Params:
    ///     start   = Index at which the range starts, inclusive.
    ///     oldEnd  = Index at which the range used to end, exclusive.
    ///     newEnd  = Index at which the range now ends, exclusive.
    void reload(size_t start, size_t oldEnd) {

        reload(start, oldEnd, oldEnd);

    }

    /// ditto
    void reload(size_t start, size_t oldEnd, size_t newEnd) {

        auto result = TextInterval(_value[start .. newEnd]);

        node.updateSize();
        _cache.updateInterval(start, oldEnd, result);

        // No update range is set, replace it
        if (_updateRangeStart == _updateRangeEnd) {

            _updateRangeStart = start;
            _updateRangeEnd   = newEnd;
    
        }

        // Update boundaries of the existing update range
        else {

            if (start < _updateRangeStart)
                _updateRangeStart = start;

            if (newEnd > _updateRangeEnd)
                _updateRangeEnd = newEnd;

        }
        
    }

    /// Replace value at a given range with a new value. This is the main, and fastest way to operate on TextInput text.
    ///
    /// Params:
    ///     start  = Start index, inclusive; First index to delete.
    ///     end    = End index, exclusive; First index after the newly inserted fragment.
    ///     value  = Value to insert.
    void replace(size_t start, size_t end, Rope value) {

        _value = _value.replace(start, end, value);
        reload(start, end, value.length);

    }

    Rope opAssign(Rope text) {

        // Identical; no change is to be made
        if (text is value) return text;

        // Request an update
        node.updateSize();
        return value = text;


    }

    const(char)[] opAssign(const(char)[] text) {

        // Ignore if there's no change to be made
        if (text == value) return text;

        // Request update otherwise
        value = text;
        return text;

    }

    string opIndexAssign(string value, size_t[2] index) {

        replace(index[0], index[1], Rope(value));
        return value;

    }

    Rope opIndexAssign(Rope value, size_t[2] index) {

        replace(index[0], index[1], value);
        return value;

    }

    char opIndex(size_t index) const nothrow {

        return value[index];

    }

    Rope opIndex(size_t[2] index) const nothrow {

        return value[index];
        
    }

    size_t[2] opSlice(size_t dim : 0)(size_t i, size_t j) const nothrow {

        return [i, j];

    }

    void opOpAssign(string operator)(const(char)[] text) {

        node.updateSize;
        mixin("value ", operator, "= text;");

    }

    /// Get the size of the text.
    Vector2 size() const {

        const scale = backend.hidpiScale;

        return Vector2(
            _sizeDots.x / scale.x,
            _sizeDots.y / scale.y,
        );

    }

    alias minSize = size;

    /// Measure and set the bounding box for this text.
    void resize() {

        resize!keepWords(Vector2(), false);

    }

    /// Set new bounding box for the text; wrap the text if it doesn't fit in boundaries.
    /// Params:
    ///     splitter = Function to use to split the text. Currently unsupported.
    ///     space    = Boundaries to fit the text in.
    ///     wrap     = Wrap text, on by default.
    void resize(alias splitter = Typeface.defaultWordChunks)(Vector2 space, bool wrap = true) {

        auto style = node.pickStyle;
        auto typeface = style.getTypeface;
        const dpi = backend.dpi;
        const scale = backend.hidpiScale;

        // Apply DPI
        style.setDPI(dpi);
        typeface.indentWidth = cast(int) (indentWidth * scale.x);
        space.x *= scale.x;
        space.y *= scale.y;

        /// Minimum pixel change that counts
        measure!splitter(space, wrap);
        _wrap = wrap;
        clearTextures();

    }

    /// Test for changes to text properties: typeface, DPI, font size, box width and wrapping. 
    /// Returns: True if the cache should be purged. 
    private bool shouldCacheReset(Vector2 space, bool wrap) {

        auto style = node.pickStyle;
        auto typeface = style.getTypeface;

        const dpi = backend.dpi;
        const epsilon = 96 / dpi / 2;
        const firstRuler = _cache.startRuler;
        const widthChanged = wrap && abs(space.x - firstRuler.lineWidth) < epsilon.x;

        return widthChanged
            || typeface !is firstRuler.typeface
            || abs(dpi.x - _dpi.x) < epsilon.x
            || abs(dpi.y - _dpi.y) < epsilon.y
            || abs(style.fontSize - _fontSize) < epsilon.y 
            || wrap != _wrap;

    }

    /// Clear the cache.
    private void clearCache(Typeface typeface, float lineWidth) {

        auto ruler = TextRuler(typeface, lineWidth);
        ruler.startLine();
        _cache = TextRulerCache(ruler);
        _updateRangeStart = 0;
        _updateRangeEnd = value.length;

    }

    /// Measure text size in the update region and update `_sizeDots` to the bounding box of this text.
    /// Params:
    ///     splitter = Function to use to split words.
    ///     space   = Limit for the space of the region the text shouldn't cross, in dots.
    ///     wrap    = If true, text should be limited by a bounding box.
    private void measure(alias splitter = Typeface.defaultWordChunks)(Vector2 space, bool wrap) {

        auto style = node.pickStyle;
        auto typeface = style.getTypeface;

        // Unset space if wrapping is disabled
        if (!wrap) space = Vector2(float.nan, float.nan);

        // Reset the cache if text properties changed
        if (shouldCacheReset(space, wrap)) {
            clearCache(typeface, space.x);
        }

        // Find the first beacon to update
        scope rulers = query(&_cache, _updateRangeStart);
        auto ruler = rulers.front;
        bool started;
        rulers.popFront;

        const start = ruler.point.length;
        size_t lastCheckpoint = start;

        enum checkpointDistance = 128;
        static assert(checkpointDistance > CachedTextRuler.sizeof);

        // Split on lines
        foreach (index, line; Typeface.lineSplitterIndex(value[start .. $])) {

            if (started) {
                ruler.startLine();
                ruler.point.line++;
                ruler.point.column = 0;
            }
            else started = true;

            // Split on words
            foreach (word, penPosition; Typeface.eachWord!splitter(ruler, line, wrap)) {

                index += word.length;

                // Keep the ruler's location in sync
                ruler.point.length = start + index;
                ruler.point.column += word.length;

                // Delete any outdated checkpoint in the cache
                while (!rulers.empty && index >= rulers.front.point.length) {

                    rulers.removeFront();

                }

                // Regularly create a checkpoint in the cache
                if (index >= lastCheckpoint + checkpointDistance) {

                    lastCheckpoint = index;
                    _cache.insert(ruler.point, ruler);

                }

            }

        }

        _sizeDots = ruler.textSize;

    }

    /// Reset the texture, destroying it and replacing it with a blank.
    void clearTextures() {

        texture.format = Image.Format.palettedAlpha;
        texture.resize(_sizeDots, hasFastEdits);

    }

    /// Generate the textures, if not already generated.
    ///
    /// Params:
    ///     chunks = Indices of chunks that need to be regenerated.
    ///     position = Position of the text; If given, only on-screen chunks will be generated.
    void generate(Vector2 position) {

        generate(texture.visibleChunks(position, backend.windowSize));

    }

    /// ditto
    void generate(R)(R chunks) @trusted {

        // Empty, nothing to do
        if (chunks.empty) return;

        auto style = node.pickStyle;
        auto typeface = style.getTypeface;
        const dpi = backend.dpi;
        const scale = backend.hidpiScale;

        // Apply sizing settings
        style.setDPI(dpi);
        typeface.indentWidth = cast(int) (indentWidth * scale.x);

        // Ignore chunks which have already been generated
        auto newChunks = chunks
            .filter!(index => !texture.chunks[index].isValid);

        // No chunks to render, stop here
        if (newChunks.empty) return;

        // Clear the chunks
        foreach (chunkIndex; newChunks) {

            texture.clearImage(chunkIndex);

        }

        auto ruler = TextRuler(typeface, _sizeDots.x);

        // Copy the layer range, make it infinite
        auto styleMap = this.styleMap.save.chain(TextStyleSlice.init.repeat);

        // Run through the text
        foreach (index, line; Typeface.lineSplitterIndex(value)) {

            ruler.startLine();

            // Split on words
            // TODO use the splitter provided when resizing
            foreach (word, penPosition; Typeface.eachWord(ruler, line, _wrap)) {

                const wordEnd = index + word.length;

                // Split the word based on the layer map
                while (index != wordEnd) {

                    const remaining = wordEnd - index;
                    auto wordFragment = word[$ - remaining .. $];
                    auto range = styleMap.front;

                    // Advance the layer map if exceeded the end
                    if (index >= range.end) {
                        styleMap.popFront;
                        continue;
                    }

                    ubyte styleIndex;

                    // Match found here
                    if (index >= range.start) {

                        // Find the end of the range
                        const end = min(wordEnd, range.end) - index;
                        wordFragment = wordFragment[0 .. end];
                        styleIndex = range.styleIndex;

                    }

                    // Match found later
                    else if (range.start < wordEnd) {

                        wordFragment = wordFragment[0 .. range.start - index];

                    }

                    const currentPenPosition = penPosition;

                    // Draw the fragment to selected chunks
                    foreach (chunkIndex; newChunks) {

                        const chunkRect = texture.chunkRectangle(chunkIndex);

                        // Ignore chunks this word is not in the bounds of
                        const relevant = chunkRect.contains(ruler.caret(currentPenPosition).start)
                            || chunkRect.contains(ruler.caret.end);

                        if (!relevant) continue;

                        // Get pen position relative to this chunk
                        auto relativePenPosition = currentPenPosition - chunkRect.start;

                        // Note: relativePenPosition is passed by ref
                        auto image = texture.chunks[chunkIndex].image;
                        typeface.drawLine(image, relativePenPosition, wordFragment, styleIndex);

                        // Update the pen position; Result of this should be the same for each chunk
                        penPosition = relativePenPosition + chunkRect.start;

                    }

                    // Update the index
                    index += wordFragment.length;

                }

            }

        }

        // Load the updated chunks
        foreach (chunkIndex; newChunks) {

            texture.upload(backend, chunkIndex, dpi);

        }

    }

    /// Draw the text.
    void draw(const Style style, Vector2 position) {

        scope const Style[1] styles = [style];

        draw(styles, position);

    }

    /// ditto
    void draw(scope const Style[] styles, Vector2 position)
    in (styles.length >= 1, "At least one style must be passed to draw(Style[], Vector2)")
    do {

        import std.math;
        import fluid.utils;

        const rectangle = Rectangle(position.tupleof, size.tupleof);
        const screen = Rectangle(0, 0, node.io.windowSize.tupleof);

        // Ignore if offscreen
        if (!overlap(rectangle, screen)) return;

        // Regenerate visible textures
        generate(position);

        // Make space in the texture's palette
        if (texture.palette.length != styles.length)
            texture.palette.length = styles.length;

        // Fill it with text colors of each of the styles
        styles.map!"a.textColor".copy(texture.palette);

        // Draw the texture if present
        texture.drawAlign(backend, rectangle);

    }

    /// ditto
    deprecated("Use draw(Style, Vector2) instead. Hint: Use fluid.utils.start(Rectangle) to get the position vector.")
    void draw(const Style style, Rectangle rectangle) {

        // Should this "crop" the result?

        draw(style, Vector2(rectangle.x, rectangle.y));

    }

    string toString() const {

        import std.conv : to;

        return _value.to!string;

    }

}

struct TextStyleSlice {

    /// Start and end of this slice. Start is inclusive, end is exclusive. The range may exceed text boundaries.
    auto start = size_t.max;

    /// ditto
    auto end = size_t.max;

    invariant(start <= end);

    /// Index of the style to be assigned to the text covered by this slice.
    ubyte styleIndex;

    ptrdiff_t opCmp(const TextStyleSlice that) const {

        return cast(ptrdiff_t) this.start - cast(ptrdiff_t) that.start;

    }

    /// Apply some offset to the slice.
    TextStyleSlice offset(int offset) const {

        return TextStyleSlice(start + offset, end + offset, styleIndex);

    }

}

unittest {

    import fluid.space;

    auto io = new HeadlessBackend;
    auto root = vspace();
    auto text = Text(root, "Hello, green world!");

    // Set colors for each part
    Style[4] styles;
    styles[0].textColor = color("#000000");
    styles[1].textColor = color("#1eff00");
    styles[2].textColor = color("#55b9ff");
    styles[3].textColor = color("#0058f1");

    // Define regions
    text.styleMap = [
        TextStyleSlice(7, 12, 1),   // green
        TextStyleSlice(13, 14, 2),  // w
        TextStyleSlice(14, 15, 3),  // o
        TextStyleSlice(15, 16, 2),  // r
        TextStyleSlice(16, 17, 3),  // l
        TextStyleSlice(17, 18, 2),  // d
    ];

    // Prepare the tree
    root.io = io;
    root.draw();

    // Draw the text
    io.nextFrame;
    text.resize();
    text.draw(styles, Vector2(0, 0));

    // Make sure the texture was drawn with the correct color
    io.assertTexture(text.texture.chunks[0], Vector2(), color("#fff"));

    foreach (i; 0..4) {

        assert(text.texture.chunks[0].palette[i] == styles[i].textColor);
        assert(text.texture.palette[i] == styles[i].textColor);

    }

    // TODO Is there a way to reliably test if the result was drawn properly? Sampling specific pixels maybe?

}

unittest {

    import fluid.space;

    auto io = new HeadlessBackend;
    auto root = vspace();

    Style[2] styles;
    styles[0].textColor = color("#000000");
    styles[1].textColor = color("#1eff00");

    auto styleMap = recurrence!"a[n-1] + 1"(0)
        .map!(a => TextStyleSlice(a, a+1, cast(ubyte) (a % 2)));

    auto text = mapText(root, "Hello, World!", styleMap);

    // Prepare the tree
    root.io = io;
    root.draw();

    // Draw the text
    io.nextFrame;
    text.resize(Vector2(50, 50));
    text.draw(styles, Vector2(0, 0));

}

unittest {

    import fluid.space;

    auto io = new HeadlessBackend;
    auto root = vspace();

    Style[2] styles;
    styles[0].textColor = color("#000000");
    styles[1].textColor = color("#1eff00");

    auto styleMap = [
        TextStyleSlice(2, 11, 1),
    ];

    auto text = mapText(root, "Hello, World!", styleMap);

    // Prepare the tree
    root.io = io;
    root.draw();

    // Draw the text
    io.nextFrame;
    text.resize(Vector2(60, 50));
    text.draw(styles, Vector2(0, 0));

}

unittest {

    import fluid.space;

    Style[2] styles;
    auto root = vspace();
    auto styleMap = [
        TextStyleSlice(0, 0, 1),
    ];
    auto text = mapText(root, "Hello, World!", styleMap);

    root.draw();
    text.resize();
    text.draw(styles, Vector2(0, 0));

}

/// A composite texture splits a larger area onto smaller chunks, making rendering large pieces of text more efficient.
struct CompositeTexture {

    enum maxChunkSize = 1024;

    struct Chunk {

        TextureGC texture;
        Image image;
        bool isValid;

        alias texture this;

    }

    /// Format of the texture.
    Image.Format format;

    /// Total size of the texture.
    Vector2 size;

    /// Underlying textures.
    ///
    /// Each texture, except for the last in each column or row, has the size of maxChunkSize on each side. The last
    /// texture in each row and column may have reduced width and height respectively.
    Chunk[] chunks;

    /// Palette to use for the texture, if relevant.
    Color[] palette;

    private bool _alwaysMax;

    this(Vector2 size, bool alwaysMax = false) {

        resize(size, alwaysMax);

    }

    /// Set a new size for the texture; recalculate the chunk number
    /// Params:
    ///     size      = New size of the texture.
    ///     alwaysMax = Always give chunks maximum size. Improves performance in nodes that frequently change their
    ///         content.
    void resize(Vector2 size, bool alwaysMax = false) {

        this.size = size;
        this._alwaysMax = alwaysMax;

        const chunkCount = columns * rows;

        this.chunks.length = chunkCount;

        // Invalidate the chunks
        foreach (ref chunk; chunks) {

            chunk.isValid = false;

        }

    }

    size_t chunkCount() const {

        return chunks.length;

    }

    size_t columns() const {

        return cast(size_t) ceil(size.x / maxChunkSize);

    }

    size_t rows() const {

        return cast(size_t) ceil(size.y / maxChunkSize);

    }

    size_t column(size_t i) const {

        return i % columns;

    }

    size_t row(size_t i) const {

        return i / columns;

    }

    /// Get the expected size of the chunk at given index
    Vector2 chunkSize(size_t i) const {

        // Return max chunk size if requested
        if (_alwaysMax)
            return Vector2(maxChunkSize, maxChunkSize);

        const x = column(i);
        const y = row(i);

        // Reduce size for last column
        const width = x + 1 == columns
            ? size.x % maxChunkSize
            : maxChunkSize;

        // Reduce size for last row
        const height = y + 1 == rows
            ? size.y % maxChunkSize
            : maxChunkSize;

        return Vector2(width, height);

    }

    /// Get index of the chunk at given X or Y.
    size_t index(size_t x, size_t y) const
    in (x < columns)
    in (y < rows)
    do {

        return x + y * columns;

    }

    /// Get position of the given chunk in dots.
    Vector2 chunkPosition(size_t i) const {

        const x = column(i);
        const y = row(i);

        return maxChunkSize * Vector2(x, y);

    }

    /// Get the rectangle of the given chunk in dots.
    /// Params:
    ///     i      = Index of the chunk.
    ///     offset = Translate the resulting rectangle by this vector.
    Rectangle chunkRectangle(size_t i, Vector2 offset = Vector2()) const {

        return Rectangle(
            (chunkPosition(i) + offset).tupleof,
            chunkSize(i).tupleof,
        );

    }

    /// Get a range of indices for all currently visible chunks.
    const visibleChunks(Vector2 position, Vector2 windowSize) {

        const offset = -position;
        const end = offset + windowSize;

        ptrdiff_t positionToIndex(alias round)(float position, ptrdiff_t limit) {

            const index = cast(ptrdiff_t) round(position / maxChunkSize);

            return index.clamp(0, limit);

        }

        const rowStart = positionToIndex!floor(offset.y, rows);
        const rowEnd = positionToIndex!ceil(end.y, rows);
        const columnStart = positionToIndex!floor(offset.x, columns);
        const columnEnd = positionToIndex!ceil(end.x, columns);

        // For each row
        return iota(rowStart, rowEnd)
            .map!(row =>

                // And each column
                iota(columnStart, columnEnd)

                    // Get its index
                    .map!(column => index(column, row)))
            .joiner;

    }

    /// Clear the image of the given chunk, making it transparent.
    void clearImage(size_t i) {

        const size = chunkSize(i);
        const width = cast(int) size.x;
        const height = cast(int) size.y;

        // Check if the size of the chunk has changed
        const sizeMatches = chunks[i].image.width == width
            && chunks[i].image.height == height;

        // Size matches, reuse the image
        if (sizeMatches)
            chunks[i].image.clear(PalettedColor.init);

        // No match, generate a new image
        else final switch (format) {

            case format.rgba:
                chunks[i].image = generateColorImage(width, height, color("#0000"));
                return;

            case format.palettedAlpha:
                chunks[i].image = generatePalettedImage(width, height, 0);
                return;

            case format.alpha:
                chunks[i].image = generateAlphaMask(width, height, 0);
                return;

        }

    }

    /// Update the texture of a given chunk using its corresponding image.
    void upload(FluidBackend backend, size_t i, Vector2 dpi) @trusted {

        const sizeMatches = chunks[i].image.width == chunks[i].texture.width
            && chunks[i].image.height == chunks[i].texture.height;

        // Size is the same as before, update the texture
        if (sizeMatches) {

            assert(chunks[i].texture.backend !is null);
            debug assert(backend is chunks[i].texture.backend,
                .format!"Backend mismatch %s != %s"(backend, chunks[i].texture.backend));

            chunks[i].texture.update(chunks[i].image);

        }

        // No match, create a new texture
        else {

            chunks[i].texture = TextureGC(backend, chunks[i].image);

        }

        // Update DPI
        chunks[i].texture.dpiX = cast(int) dpi.x;
        chunks[i].texture.dpiY = cast(int) dpi.y;

        // Mark as valid
        chunks[i].isValid = true;

    }

    /// Draw onscreen parts of the texture.
    void drawAlign(FluidBackend backend, Rectangle rectangle, Color tint = color("#fff")) {

        // Draw each visible chunk
        foreach (index; visibleChunks(rectangle.start, backend.windowSize)) {

            assert(chunks[index].texture.backend !is null);
            debug assert(backend is chunks[index].texture.backend,
                .format!"Backend mismatch %s != %s"(backend, chunks[index].texture.backend));

            const start = rectangle.start + chunkPosition(index);
            const size = chunks[index].texture.viewportSize;
            const rect = Rectangle(start.tupleof, size.tupleof);

            // Assign palette
            chunks[index].palette = palette;

            backend.drawTextureAlign(chunks[index], rect, tint);

        }

    }

}

@("Only visible chunks are redrawn")
unittest {

    import std.conv;
    import fluid.label;
    import fluid.scroll;

    enum chunkSize = CompositeTexture.maxChunkSize;

    auto io = new HeadlessBackend;
    auto root = vscrollable!label(
        nullTheme.derive(
            rule!Label(
                Rule.textColor = color("#000"),
            ),
        ),
        "One\nTwo\nThree\nFour\nFive\n"
    );

    root.io = io;
    root.draw();

    // One chunk only
    assert(root.text.texture.chunks.length == 1);

    // This one chunk must have been drawn
    io.assertTexture(root.text.texture.chunks[0], Vector2(), color("#fff"));

    // Add a lot more text
    io.nextFrame;
    root.text = root.text.repeat(30).joiner.text;
    root.draw();

    const textSize = root.text._sizeDots;

    // Make sure assumptions for this test are sound:
    assert(textSize.y > chunkSize * 2, "Generated text must span at least three chunks");
    assert(io.windowSize.y < chunkSize, "Window size must be smaller than chunk size");

    // This time, there should be more chunks
    assert(root.text.texture.chunks.length >= 3);

    // Only the first one would be drawn, however
    io.assertTexture(root.text.texture.chunks[0], Vector2(), color("#fff"));
    assert(io.textures.walkLength == 1);

    // And, only the first one should be generated
    assert(root.text.texture.chunks[0].isValid);
    assert(root.text.texture.chunks[1 .. $].all!((ref a) => !a.isValid));

    // Scroll just enough so that both chunks should be on screen
    io.nextFrame;
    root.scroll = chunkSize - 1;
    root.draw();

    // First two chunks must have been generated and drawn
    assert(root.text.texture.chunks[0 .. 2].all!((ref a) => a.isValid));
    assert(root.text.texture.chunks[2 .. $].all!((ref a) => !a.isValid));

    io.assertTexture(root.text.texture.chunks[0], Vector2(0, -root.scroll), color("#fff"));
    io.assertTexture(root.text.texture.chunks[1], Vector2(0, -root.scroll + chunkSize), color("#fff"));
    assert(io.textures.walkLength == 2);

    // Skip to third chunk, force regeneration
    io.nextFrame;
    root.scroll = 2 * chunkSize - 1;
    root.updateSize();
    root.draw();

    // Because of the resize, the first chunk must have been destroyed
    assert(root.text.texture.chunks[0 .. 1].all!((ref a) => !a.isValid));
    assert(root.text.texture.chunks[1 .. 3].all!((ref a) => a.isValid));
    assert(root.text.texture.chunks[3 .. $].all!((ref a) => !a.isValid));

    io.assertTexture(root.text.texture.chunks[1], Vector2(0, -root.scroll + chunkSize), color("#fff"));
    io.assertTexture(root.text.texture.chunks[2], Vector2(0, -root.scroll + chunkSize*2), color("#fff"));
    assert(io.textures.walkLength == 2);

}

unittest {

    import std.file;
    import fluid.text_input;

    auto root = textInput();
    root.draw();
    root.io.clipboard = readText(__FILE_FULL_PATH__);
    root.paste();
    root.draw();

}

/// Represents the distance between two points in in text.
struct TextInterval {

    /// Length of the interval in bytes.
    size_t length;

    /// Number of line breaks in this range; 0-indexed line number.
    size_t line;

    /// Number of characters since the last line break; 0-indexed column number.
    size_t column;

    this(size_t length, size_t line, size_t column) {

        this.length = length;
        this.line   = line;
        this.column = column;

    }

    /// Calculate the interval occupied by a range (rope or string).
    /// Params:
    ///     fragment = Fragment to measure.
    this(Range)(Range fragment) 
    if (isSomeChar!(ElementType!Range) && (hasLength!Range || isSomeString!Range))
    do {

        this.length = fragment.length;

        // Count lines in the string, find the length of the last line
        foreach (line; Typeface.lineSplitter(fragment)) {

            this.line++;
            this.column = line.length;

        }

        // Decrement line count
        if (this.line) this.line--;

    }

    @("An empty string creates an empty interval")
    unittest {

        assert(TextInterval("")       == TextInterval.init);
        assert(TextInterval(Rope("")) == TextInterval.init);

    }

    /// Sum the intervals. Order of operation matters — `other` should come later in text than `this`.
    /// Params:
    ///     other = Next interval; interval to merge with.
    /// Returns:
    ///     A new interval that is a sum of both intervals.
    TextInterval opBinary(string op : "+")(const TextInterval other) const {

        // If the other point has a line break, our column does not affect it
        // Add them only if there is no line break 
        const column = other.line
            ? other.column
            : other.column + column;

        return TextInterval(length + other.length, line + other.line, column);

    }

    ref TextInterval opOpAssign(string op : "+")(const TextInterval other) {

        return this = this + other;

    }

    /// Change the point of reference for this interval, as if skipping characters from the start of the string. This
    /// is the interval equivalent of `std.range.drop` or a `[n..$]` slice. 
    ///
    /// This function is an inverse of interval sum (+), where `head` is the left hand side argument, and the return 
    /// value is the right hand side argument.
    ///
    /// Returns:
    ///     This interval, but set relative to `head`.
    /// Params:
    ///     head = Point inside this interval to use as a reference.
    TextInterval dropHead(const TextInterval head) const
    in (this.length >= head.length, format!"`head` cannot be longer (%s) than `this` (%s)"(head.length, this.length))
    out (r; head + r == this)
    do {

        // If the head points to some line in the middle, the resulting column stays the same.
        //     [Lorem ipsum dolor sit amet, consectetur adipiscing 
        //     elit, sed do eiusmod tempor] incididunt ut labore et 
        //     dolore magna aliqua.
        //                        ^ this.column, return.column
        if (head.line != this.line) {
            return TextInterval(length - head.length, line - head.line, this.column);
        }

        // If the head points to the last line, however, the column will be a difference.
        //     [Lorem ipsum dolor sit amet, consectetur adipiscing 
        //     elit, sed do eiusmod tempor incididunt ut labore et 
        //     dolore magna] aliqua.
        //     head.column ^       ^ this.column
        else {
            return TextInterval(length - head.length, line - head.line, this.column - head.column);
        }

    }

}

/// Cache result matching a point in text to a `TextRuler`.
private struct CachedTextRuler {

    /// Point (interval from the start of the text) at which the measurement was made.
    TextInterval point;

    /// Ruler containing information about the current position in the text.
    TextRuler ruler;

    alias ruler this;

}

/// This is a cache storing instances of `TextRuler` corresponding to different positions in the same text. This makes
/// it possible to find screen position of any character in text by its index. It also maps each of these points to a 
/// line and column number combo, making it possible to query characters by their position in the grid.
///
/// Entries into the cache are made in intervals. The cache will return the last found cache entry rather than one 
/// directly corresponding to the queried character. To get an exact position, the text ruler can be advanced by 
/// measuring all characters in between.
private struct TextRulerCache {

    /// Ruler at the start of this range.
    TextRuler startRuler;

    /// Interval covered by this range.
    TextInterval interval;

    /// Left and right branch of this cache entry.
    TextRulerCache* left, right;

    invariant {

        if (left) {

            assert(right, "Right branch is null, but the left isn't");
            assert(startRuler == left.startRuler);
            assert(interval == left.interval + right.interval, 
                format!"Cache interval %s is not the sum of its members %s + %s"(interval, left.interval, 
                    right.interval));

        }

        else {
            
            assert(!right, "Left branch is null, but the right isn't");

        }

    }

    /// Initialize the cache with the given `TextRuler` parameters.
    this(Typeface typeface, float lineWidth = float.nan) {

        this(TextRuler(typeface, lineWidth));

    }

    this(TextRuler ruler) {

        this.startRuler = ruler;

    }

    private this(TextRuler ruler, TextInterval interval) {

        this.startRuler = ruler;
        this.interval = interval;

    }

    private this(TextRulerCache* left, TextRulerCache* right) {

        this.startRuler = left.startRuler;
        this.interval = left.interval + right.interval;
        this.left = left;
        this.right = right;

    }

    /// Returns: True if this cache contains exactly one entry. In such case, it will not have any children nodes.
    bool isLeaf() const {

        return left is null;

    }

    /// Resize a fragment of text, recalculating offsets of rulers.
    /// Params:
    ///     start  = First index at which text changes.
    ///     oldEnd = Last index of text to be replaced.
    ///     newEnd = Size of the new text. 
    void updateInterval(size_t start, size_t oldEnd, TextInterval newEnd) {

        // TODO Not implemented

    }

    /// Insert a ruler into the cache.
    /// Params:
    ///     point = Point to place the ruler at; text interval preceding the ruler.
    ///     ruler = Ruler to insert.
    void insert(TextInterval point, TextRuler ruler) {

        // Detect appending
        if (point.length > interval.length) {

            append(point, ruler);
            return;

        }

        // Find a point in this cache to enter
        auto range = query(&this, point.length);
        auto cache = range.stack.back;
        auto foundPoint = range.front.point;

        static assert(isPointer!(typeof(cache)));

        // Found an exact match, replace it
        if (point == foundPoint) {

            range.front = ruler;
            return;

        }

        // Inserting between two points
        else {

            assert(cache.interval.length != 0, "Cache data invalid, failed to detect append");

            const oldInterval = cache.interval;

            // We're inserting in between two points; `leftInterval` is distance from the left to our point, 
            // `rightInterval` is the distance from our point to the next point. Total distance is `cache.interval`.
            //
            //   ~~~~~~~~~~~~ cache.interval ~~~~~~~~~~~~
            //   |  leftInterval     |  rightInterval   |  (relative)
            //   ^ left.startRuler   ^ right.startRuler
            //   ^ foundPoint        ^ point               (absolute)
            const leftInterval = point.dropHead(foundPoint);
            const rightInterval = cache.interval.dropHead(leftInterval);

            assert(foundPoint   + leftInterval == point);
            assert(leftInterval + rightInterval == cache.interval);

            auto left = new TextRulerCache(cache.startRuler, leftInterval);
            auto right = new TextRulerCache(ruler, rightInterval);

            *range.stack.back = TextRulerCache(left, right);

            assert(range.stack.back.startRuler == left.startRuler);
            assert(range.stack.back.interval == oldInterval);
            assert(range.stack.back.interval == leftInterval + rightInterval);

        }

    }

    /// Append a ruler to the cache.
    /// Params:
    ///     point = Point to place the ruler at; text interval preceding the ruler. This must point beyond interval
    ///         covered by the cache.
    ///     ruler = Ruler to insert.
    private void append(TextInterval point, TextRuler ruler)
    in (point.length > interval.length)
    do {

        scope cache = &this;
        auto relativePoint = point;

        // Descend
        while (!cache.isLeaf) {

            // Update interval
            cache.interval = relativePoint;

            // Descend towards the right side
            relativePoint = relativePoint.dropHead(cache.left.interval);
            cache = cache.right;

        }

        // Insert the node
        auto left  = new TextRulerCache(cache.startRuler, relativePoint);
        auto right = new TextRulerCache(ruler, TextInterval.init);

        *cache = TextRulerCache(left, right);        

    }

}

/// Get the last `TextRuler` at the given index, or preceding it.
/// Params:
///     index = Index to search for.
/// Returns:
///     A `TextRuler` struct wrapper with an extra `point` field to indicate the location in text the point 
///     corresponds to.
private auto query(return scope TextRulerCache* cache, size_t index)
out (r; !r.empty)
out (r) {
    static assert(is(ElementType!(typeof(r)) : const CachedTextRuler), ElementType!(typeof(r)).stringof);
}
do {

    import std.container.dlist : DList;

    /// This range iterates the cache tree in order while skipping all but the last element that precedes the index. 
    /// It builds  a stack, the last item of which points to the current element of the range. Since the cache is 
    /// a binary tree in which each node either has one or two children, the stack can only have three possible 
    /// states:
    ///
    /// * It is empty, and so is this range
    /// * It points to a leaf (which is a valid state for `front`)
    /// * The last item has two children, so it needs to descend.
    ///
    /// During descend, left nodes are chosen, unless the first item — the needle — is on the right side. When 
    /// ascending (`popFront`), right nodes are chosen as left nodes have already been tested. To make sure the 
    /// right side is not visited again, nodes are not pushed to the stack when their right side is. For example,
    /// when iterating through a node `A` which has children `B` and `C`, the stack is initialized to `[A]`. 
    /// Descend is first done into `B`, resulting in `[A, B]`. First `popFront` removes `B` and descends the right
    /// side of `A` replacing it with `C`. The stack is `[C]`.
    static struct TextRulerCacheRange {

        DList!(TextRulerCache*) stack;
        TextRulerCache* parent;
        size_t needle;
        TextInterval offset;

        @safe:

        inout(CachedTextRuler) front() inout {
            return inout CachedTextRuler(
                offset,
                stack.back.startRuler
            );
        }

        /// Assign a new value to the front
        ref TextRuler front(TextRuler ruler) {

            stack.back.startRuler = ruler;

            // Update startRuler in all ancestors
            foreach (ancestor; stack[].retro.dropOne) {
                static assert(isPointer!(typeof(ancestor)));

                // End as soon as an unaffected ancestor is reached
                if (ancestor.startRuler is ancestor.left.startRuler) break;
                
                ancestor.startRuler = ancestor.left.startRuler;

            }

            return stack.back.startRuler;

        }

        bool empty() const {
            return stack.empty;
        }

        void popFront() {

            assert(!empty);
            assert(stack.back.isLeaf);

            offset += stack.back.interval;

            // Remove the leaf (front)
            stack.removeBack();

            // Stop if emptied the stack
            if (stack.empty) return;

            auto ancestor = stack.back;

            // Remove the next node and descend into its right side
            stack.removeBack();
            stack ~= ancestor.right;
            descend();

        }

        /// Remove the entry at the front of the range from the cache and advance to the next item.
        ///
        /// This cannot be used to remove the first entry in the cache.
        void removeFront() {

            assert(!empty);
            assert(stack.back.isLeaf);

            // Can't remove the root
            assert(offset.length == 0, "Cannot remove the first item in the cache.");

            const interval = parent.interval;

            // The node we're removing is on the right side, replace it with the left
            if (stack.back is parent.right) {

                *stack.back = *parent.left;
                stack.back.interval = interval;

            }

            // The node we're removing is on the left side
            else if (stack.back is parent.left) {

                const offset = parent.left.interval;

                // Move the right side to replace it
                *stack.back = *parent.right;
                
                foreach (ancestor; stack[].retro.dropOne) {

                    // Move the offset fromt the removed node to the last node before
                    if (ancestor.startRuler is ancestor.left.startRuler) {
                        ancestor.left.interval += offset;
                        return;

                    }
                
                    ancestor.startRuler = ancestor.left.startRuler;

                }

                assert(false);

            }

        }

        /// Advance the range to the next leaf
        private void descend() {

            while (!stack.back.isLeaf) {

                auto front = stack.back;

                parent = front;

                // Enter the left side, unless we know the needle is in the right side
                if (needle < offset.length + front.left.interval.length) {

                    stack ~= front.left;

                }

                // Enter the right side
                else {

                    stack.removeBack();
                    stack ~= front.right;
                    offset += front.left.interval;

                }

            }

        }

    }
    
    auto ruler = TextRulerCacheRange(
        DList!(TextRulerCache*)(cache),
        null,
        index
    );
    ruler.descend();

    return ruler;

}

@("Query on a leaf cache returns the first item")
unittest {

    auto cache = new TextRulerCache();

    assert(cache.query(0).equal([TextRuler.init]));
    assert(cache.query(1).equal([TextRuler.init]));
    assert(cache.query(10).equal([TextRuler.init]));

    auto ruler = TextRuler(Typeface.defaultTypeface, 10);
    *cache = TextRulerCache(ruler);

    assert(cache.query(0).equal([ruler]));
    assert(cache.query(1).equal([ruler]));
    assert(cache.query(10).equal([ruler]));

}

@("TextRulerCache.insert works")
unittest {

    auto cache = new TextRulerCache();
    auto typeface = Typeface.defaultTypeface;

    auto points = [
        CachedTextRuler(TextInterval( 0, 0,  0), TextRuler(typeface, 1)),
        CachedTextRuler(TextInterval( 5, 0,  5), TextRuler(typeface, 2)),
        CachedTextRuler(TextInterval(10, 0, 10), TextRuler(typeface, 3)),
        CachedTextRuler(TextInterval(15, 1,  3), TextRuler(typeface, 4)),
        CachedTextRuler(TextInterval(20, 1,  8), TextRuler(typeface, 5)),
        CachedTextRuler(TextInterval(25, 2,  1), TextRuler(typeface, 6)),
    ];

    // 12 character long lines, snapshots every 5 characters
    cache.insert(points[0].tupleof);
    cache.insert(points[1].tupleof);
    cache.insert(points[2].tupleof);
    cache.insert(points[3].tupleof);
    cache.insert(points[4].tupleof);
    cache.insert(points[5].tupleof);

    assert(cache.query( 0).equal(points));
    assert(cache.query( 1).equal(points));
    
    assert(cache.query( 7).equal(points[1..$]));
    assert(cache.query(30).equal(points[5..$]));
    assert(cache.query(18).equal(points[3..$]));
    assert(cache.query(15).equal(points[3..$]));

    auto newPoints = [
        CachedTextRuler(TextInterval( 0, 0,  0), TextRuler(typeface, 7)),
        CachedTextRuler(TextInterval(12, 1,  0), TextRuler(typeface, 8)),
        CachedTextRuler(TextInterval(24, 2,  0), TextRuler(typeface, 9)),
    ];

    points = points[1..$];
    points ~= newPoints;
    sort!"a.point.length < b.point.length"(points);

    // Insert a few more snapshots
    cache.insert(newPoints[2].tupleof);
    cache.insert(newPoints[0].tupleof);
    cache.insert(newPoints[1].tupleof);
    
    assert(cache.query(0).equal(points));

}

@("Text automatically creates TextRulerCache entries")
unittest {

    import fluid.label;

    auto root = label(nullTheme, "Lorem ipsum dolor sit amet, consectetur " 
        ~ "adipiscing elit, sed do eiusmod tempor " 
        ~ "incididunt ut labore et dolore magna " 
        ~ "aliqua. Ut enim ad minim veniam, quis " 
        ~ "nostrud exercitation ullamco laboris " 
        ~ "nisi ut aliquip ex ea commodo consequat.\n" 
        ~ "\n" 
        ~ "Duis aute irure dolor in reprehenderit " 
        ~ "in voluptate velit esse cillum dolore " 
        ~ "eu fugiat nulla pariatur. Excepteur " 
        ~ "sint occaecat cupidatat non proident, " 
        ~ "sunt in culpa qui officia deserunt " 
        ~ "mollit anim id est laborum.\n");

    assert(root.text._updateRangeStart == 0);
    assert(root.text._updateRangeEnd == root.text.length);

    root.draw();

    auto typeface = root.style.getTypeface;
    auto space = root.io.windowSize;

    assert(root.text[232] == '\n');
    assert(query(&root.text._cache, 0).map!"a.point".equal([
        TextInterval(  0, 0,   0),
        TextInterval(132, 0, 132),  // Past 128 characters, + "nim ", next checkpoint 132+128
        TextInterval(272, 2,  39),  // Past 260 characters, + "prehenderit ", line begins at 233
        TextInterval(402, 2, 169),  // Past 400 characters, + "i "
    ]));

    version (none) {
        // Why isn't this equal?
        auto ruler = TextRuler(typeface, space.x);
        typeface.measure(ruler, "");
        assert(query(&root.text._cache,   0).front == ruler);
    }
    {
        auto ruler = TextRuler(typeface, space.x);
        typeface.measure(ruler, root.text[0..132]);
        assert(query(&root.text._cache, 132).front == ruler);
    }
    {
        auto ruler = TextRuler(typeface, space.x);
        typeface.measure(ruler, root.text[0..272]);
        assert(query(&root.text._cache, 272).front == ruler);
    }
    {
        auto ruler = TextRuler(typeface, space.x);
        typeface.measure(ruler, root.text[0..402]);
        assert(query(&root.text._cache, 402).front == ruler);
    }

}

@("Text can update entries TextRulerCache entries")
unittest {

    import fluid.label;

    auto root = label(nullTheme, "Lorem ipsum dolor sit amet, consectetur " 
        ~ "adipiscing elit, sed do eiusmod tempor " 
        ~ "incididunt ut labore et dolore magna " 
        ~ "aliqua. Ut enim ad minim veniam, quis " 
        ~ "nostrud exercitation ullamco laboris " 
        ~ "nisi ut aliquip ex ea commodo consequat.\n" 
        ~ "\n" 
        ~ "Duis aute irure dolor in reprehenderit " 
        ~ "in voluptate velit esse cillum dolore " 
        ~ "eu fugiat nulla pariatur. Excepteur " 
        ~ "sint occaecat cupidatat non proident, " 
        ~ "sunt in culpa qui officia deserunt " 
        ~ "mollit anim id est laborum.\n");

    root.draw();

    // Same data as in the last test
    assert(query(&root.text._cache, 0).map!"a.point".equal([
        TextInterval(  0, 0,   0),
        TextInterval(132, 0, 132),
        TextInterval(272, 2,  39),
        TextInterval(402, 2, 169),
    ]));

    // Replace enough text to destroy two intervals
    root.text[130..280] = 'a'.repeat(150).array;

    assert(root.tree.resizePending);
    root.draw();

    assert(query(&root.text._cache, 0).map!"a.point".equal([
        TextInterval(  0, 0,   0),
        TextInterval(285, 0, 285),  // 132 and 272 are gone
        TextInterval(419, 0, 419),
    ]));

}
